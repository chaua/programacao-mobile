// MIT License
//
// Copyright (c) 2025 Chau√£ Queirolo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// =============================================================================
// VARI√ÅVEIS, TIPOS E INTERPOLA√á√ÉO
// =============================================================================
// -----------------------------------------------------------------------------
// Autor...: Chau√£ Queirolo
// Data....: 22/08/2025
// -----------------------------------------------------------------------------

void main() {
  // ---------------------------------------------------------------------------
  // 1) Vari√°veis: expl√≠citas e impl√≠citas
  // ---------------------------------------------------------------------------
  // - Vari√°veis expl√≠citas:
  // - Vari√°veis impl√≠citas (var): o Dart "descobre" o tipo pelo valor atribu√≠do.
  // - Nos dois casos, o tipo n√£o pode mudar depois (ex.: int n√£o vira String).

  // Vari√°veis expl√≠citas
  // - o tipo vem antes do nome da vari√°vel
  int    x1 = 10;
  double x2 = 3.14;
  bool   x3 = false;
  String x4 = 'Ol√°, mundo üó∫Ô∏è';

  print('x1 = $x1 | x2 = $x2 | x3 = $x3 | x4 = $x4');

  // Vari√°veis impl√≠citas
  // - o tipo √© definido pelo valor atribu√≠do
  var y1 = 10;            // x1 √© uma vari√°vel do tipo int
  var y2 = 3.14;          // x2 √© uma vari√°vel do tipo double
  var y3 = true;          // x3 √© uma vari√°vel do tipo bool
  var y4 = 'Ol√°, mundo!'; // x4 √© uma vari√°vel do tipo String

  print('y1 = $y1 | y2 = $y2 | y3 = $y3 | y4 = $y4');

  // IMPORTANTE: Nos dois casos, o tipo n√£o pode mudar depois
  //             Exemplo: int n√£o vira String

  // ---------------------------------------------------------------------------
  // 2) Tipos b√°sicos
  // ---------------------------------------------------------------------------
  // - int    ‚Üí n√∫meros inteiros
  // - double ‚Üí n√∫meros decimais
  // - String ‚Üí textos
  // - bool   ‚Üí valores l√≥gicos (true/false)

  int inteiro = 42;
  double real = 3.1415;
  String texto = 'Programa√ß√£o Mobile ü¶Ñ';
  bool ehVisivel = true;

  print('inteiro   = $inteiro');
  print('real      = $real');
  print('texto     = $texto');
  print('ehVisivel = $ehVisivel');

  // ---------------------------------------------------------------------------
  // 3) final e const
  // ---------------------------------------------------------------------------

  // final: s√≥ pode receber um valor uma vez, mas esse valor pode vir em
  //        tempo de execu√ß√£o.
  //        Exemplo: DateTime.now() s√≥ √© conhecido quando o programa roda.
  final agora = DateTime.now(); // valor em runtime

  // const: valor deve ser conhecido j√° no c√≥digo, em tempo de compila√ß√£o.
  //        Exemplo: pi = 3.14159.
  const pi = 3.14159; // valor fixo em compile-time

  print('agora (final): $agora');
  print('pi (const)...: $pi');

  // IMPORTANTE: final e const n√£o podem mudar depois de atribu√≠dos
  // agora = DateTime.now(); // ERRO!
  // pi    = 3.14;           // ERRO!

  // ---------------------------------------------------------------------------
  // 4) Interpola√ß√£o de strings
  // ---------------------------------------------------------------------------
  // - Usar vari√°veis dentro de strings com $variavel ou ${expressao}.

  final cliente = 'Jo√£o';
  final itens = 4;
  final valorUnitario = 12.5;
  final total = itens * valorUnitario;

  // No exemplo, calculamos o total e mostramos dentro da string.
  final recibo = 'Cliente: $cliente\nItens: $itens\nTotal: R\$ $total}';
  print(recibo);

  // ---------------------------------------------------------------------------
  // 5) ATIVIDADE
  // ---------------------------------------------------------------------------

  // 1) Crie um vari√°veis que representem um produto: nome, preco, quantidade
  //    e se est√° dispon√≠vel no estoque.
  //
  //    Imprima uma frase interpolada apresentando esses dados.

}

